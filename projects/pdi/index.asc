
:stem:
:toc: left
:toc-title: Sumário
:last-update-label!:
:source-highlighter: pygments

= Respostas Exercícios de PDI=
Gabriel Teixeira Vantuil 
Luiz Felipe Maciel Correia 

:appversion: 1.0.0

Site para hospedagem das respostas dos exercicios propostos no 
link:http://agostinhobritojr.github.io/tutoriais/pdi/[tutorial^] do Prof. Dr. Agostinho Brito Jr. 

== Exercicios 2.2 ==

Esta seção é apenas uma introdução a manipulação dos pixels de uma imagem usando diretamente o metodo .at da classe Mat.

=== Exercício 2.2.1 - Regions ===

* Desenvolvimento:

É solicitado ao usuário dois pontos pertecentes ao interior da imagem. Logo depois a área definida pelos pontos 
de interesse é preenchida com a negativa da cor anterior. Para encontrar esse valor, basta fazer (255 - valor_antigo). 
	
* Resultados:

Ao testar o algoritmo foi informado P1 = (10,10) e P2 = (100,150) para inverter a cor.

[[fig_regionsR, Regions]]
//[.text-center]
.Saída do programa Regions
image::2.2/Regions/resultado.png[title="Saída do programa Regions"]

* Código: 

[[exa_regions, Regions]]
[source,cpp]
.regions.cpp
----
include::2.2/Regions/regions.cpp[]
----

=== Exercício 2.2.2 - TrocaRegioes ===

* Desenvolvimento:

O primeiro passo para realizar a troca é armazenar a matriz original, e trabalhar em cima de uma outra matriz para 
que não haja perda de informações. Logo após ocorre a troca, que consiste em 4 laços onde ocorrem as cópias
 dos quadrantes para o quadrante da diagonal.

* Resultados:

Utilizado a imagem biel.png.

[[fig_trocaregioesE, Regions]]
//[.text-center]
.Saída do programa TrocaRegioes
image::2.2/Trocaregioes/resultado.png[title="Saída do programa TrocaRegioes"]

* Código: 

[[exa_trocaregioes, Regions]]
[source,cpp]
.trocaregioes.cpp
----
include::2.2/Trocaregioes/trocaregioes.cpp[]
----

== Exercicios 3.2 ==

Esta seção é uma introdução a indentificação de objetos na imagem, juntamente com noções do uso da função floodFill() do 
OpenCV.

=== Exercício 3.2.1 - Solução ===

* Desenvolvimento:
Para solucionar o problema de muitos objetos, foi utilizado um algoritmo que classifica cada objeto com uma cor diferente do 
espaço RGB, sendo que a classificação começa com (0,0,0), e começa a incrementar o vermelho, quando o vermelho alcançar 255 
incrementa o verde e zera o vermelho, o mesmo para azul e verde.

 A sequência fica:
(0,0,0), 
(0,0,1) 
...
(0,0,255), 
(0,1,0), 
(0,1,1),
...
(0,255,255),
(1,0,0), 
 ...
(255,255,255).

* Resultados:

[[fig_solucaoI, Solucao]]
//[.text-center]
.Saída do programa Solucao
image::3.2/3.2.1/resultado.png[title="Saída do programa Solucao"]

* Código: 

[[exa_solucao, Solucao]]
[source,cpp]
.labeling_3.2.1.cpp
----
include::3.2/3.2.1/labeling_3.2.1.cpp[]
----

=== Exercício 3.2.2 - ContaBuracos ===

* Desenvolvimento:

* Resultados:
** Passo 1: Retirar bolhas das bordas.
** Passo 2: Contagem e Rotulação das bolhas como no exemplo.
** Passo 3: Preencher o fundo com outro tom de cinza.
** Passo 4: Contar e Rotular o(s) buracos(s) de cada bolha.

Aṕos o procedimento é mostrado no terminal a quantidade de bolhas encontradas. 

[[fig_contaburacos1, ContaBuracos1]]
//[.text-center]
image::3.2/3.2.2/resultado.png[title="resultado"]

[[fig_contaburacos2, ContaBuracos1]]
//[.text-center]
image::3.2/3.2.2/terminal.png[title="terminal"]

[[exa_contaburacos, ContaBuracos]]
[source,cpp]
.labeling_3.2.2.cpp
----
include::3.2/3.2.2/labeling_3.2.2.cpp[]
----

== Exercícios 4.2 ==

=== Exercício 4.2.1 - Equalize ===

* Desenvolvimento:
Para realizar a equalização de histograma, foi utilizada a função equalizeHist() da biblioteca opencv.

* Resultados:

[[fig_equalize1, Equalize1]]
//[.text-center]
.Imagem Original
image::4.2/Equalize/Original.png[title="Imagem Original"]

[[fig_equalize2, Equalize2]]
//[.text-center]
.Imagem Original
image::4.2/Equalize/Equalizada.png[title="Imagem Equalizada"]

[[exa_equalize, Equalize]]
[source,cpp]
.equalize.cpp
----
include::4.2/Equalize/equalize.cpp[]
----

=== Exercício 4.2.2 - MotionDetector ===

* Desenvolvimento:
Ao detectar a uma SAD (soma de diferenças absolutas) entre dois histogramas maior do que um valor pré definido (no exemplo: 30000),
imprime no terminal a mensagem avisando que houve movimento (significativo) e o valor da SAD.
* Resultados:

[[fig_motiondetector, MotionDetector]]
//[.text-center]
.Terminal do programa MotionDetector
image::4.2/Motiondetector/terminal.png[title="Terminal do programa MotionDetector"]

[[exa_motiondetector, MotionDetector]]
[source,cpp]
.motiondetector.cpp
----
include::4.2/Motiondetector/motiondetector.cpp[]
----

== Exercícios 5.2 ==
* Desenvolvimento:
Para realizar o filtro solicitado, foi realizado o filtro gaussiano, e na sequência o laplaciano. 

* Resultados: 

[[fig_laplgauss1, LaplGauss1]]
//[.text-center]
.Imagem original.
image::5.2/original.png[title="Imagem original"]

[[fig_laplgauss2, LaplGauss2]]
//[.text-center]
.resultado
image::5.2/resultado.png[title="resultado"]

[[exa_laplgauss, LaplGauss]]
[source,cpp]
.laplgauss.cpp
----
include::5.2/laplgauss.cpp[]
----


== Exercício 6.1 ==
* Desenvolvimento:


* Resultados: 

[[fig_tilt_shift1, tilt_shift1]]
//[.text-center]
.Imagem original.
image::6.1/original.png[title="Imagem original"]

[[fig_tilt_shift2, tilt_shift]]
//[.text-center]
.resultado
image::6.1/resultado.png[title="resultado"]

[[exa_tilt_shift, tilt_shift]]
[source,cpp]
.tilt_shift.cpp
----
include::6.1/tilt_shift.cpp[]
----

== Exercícío 7.2 ==


[text-center]
image::7.2/resultado_dft.jpg[Resultado]
[caption="Imagem da Transformada Homomórfica"]

A imagem acima mostra o resultado da apliação da transformada homomórfica, utilizando um filtro da gaussiana, para realizar a separação das luzes foi utilizado um raio de 200 e o n igual a 10, manipulando as baixas frequências que é a iluminação ao invés das altas que seria a reflectância.




[source,c++]


----
//No código a seguir é necessário a passagem do valor de n
include::7.2/dft2.cpp[lines=8..34]
----
== Exercício 8.3 ==

* Desenvolvimento:

Para desenvolver este programa, foram utilizados como base os codigos link:canny.cpp[] e link:pontilhismo.cpp[]. O objetivo
 é criar uma imagem semelhante a uma pintura, à partir de uma imagem dada.

O primeiro passo é percorrer a imagem utilizando pontos aleatórios com uma determida distância entre um e outro, definida pelo valor "STEP", logo após uma pequena
variação ("JITTER") é adicionada às coordenadas do ponto sorteado, após, um circulo cujo raio é determinado por "RAIO" é desenhado sobre o ponto, preenchido com a cor do ponto original. O 
mesmo processo é reproduzido em todos os pontos sorteados da imagem.

O próximo passo é encontrar as bordas da imagem, para tal, o programa exibe uma pré-visualização da imagem de saida e uma barra deslizante para selecionar 
o valor que será introduzido no algoritmo de canny.

A imagem de saida é o resultado da técnica pontilhista e a mesma técnica aplicada sobre o filtro de canny, onde apenas as bordas são elegíveis para executar o pontilhismo. 



* Resultados: 

[[fig_pontilhismo, pontilhismo]]
//[.text-center]
.Imagem original.
image::8.3/image.jpg[title="Imagem original"]

[[fig_pontilhismo, pontilhismo]]
//[.text-center]
.pre_view
image::8.3/pre_view.jpg[title="Pré-visualização"]

[[fig_pontilhismo, pontilhismo]]
//[.text-center]
.canny
image::8.3/canny.jpg[title="filtro canny"]

[[fig_pontilhismo, pontilhismo]]
//[.text-center]
.final
image::8.3/final.jpg[title="final"]

[[fig_pontilhismo, pontilhismo]]
[source,cpp]
.cannypoints.cpp
----
include::8.3/cannypoints.cpp[]
----



== Exercício 9.2 ==

* Introdução:

O algoritmo do kmeans tem por finalidade estimar centroides ideais pra uma quantidade de n possíveis amostras espacialmente 
distribuídas, o algoritmo escolhe o centroide que melhor representa um grupo dentre 'k' grupos e os adiciona a essa categoria, 
a escolha de um centroide inicial tem impacto fortíssimo na solução inicial do problema e por isso produz-se 10 imagens diferentes.

* Desenvolvimento:

Utilizando o codigo de exemplo foram realizadas as alterações solicitadas no número de rodadas (1) e no parâmetro referente a forma de aquisição de centros 
do algoritmo kmeans. Na etapa seguinte, foi desenvolvido um algoritmo para acumular em outra imagem a diferença, em 10 execuções do kmeans, entre o quadro atual e o último calculado para verificar,
visualmente, se realmente houve alteração dos agrupamentos, pois por se tratar de alterações muito pequenas, torna-se dificil a indentificação
dessas alterações a olho nu.

* Resultados

[[fig_kmeans, kmeans]]
//[.text-center]
.Imagem original.
image::9.2/Original.jpg[title="Imagem original"]

[[fig_kmeans, kmeans]]
//[.text-center]
.Imagem exemplo.
image::9.2/exemplo.jpg[title="Exemplo de saida"]

[[fig_kmeans, kmeans]]
//[.text-center]
.Imagem diferencas.
image::9.2/diferencas.jpg[title="Diferencas"]

[[fig_kmeans, kmeans]]
[source,cpp]
.kmeans.cpp

----
include::9.2/kmeans.cpp[]
----





