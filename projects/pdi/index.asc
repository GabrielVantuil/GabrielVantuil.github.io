
:stem:
:toc: left
:toc-title: Sumário
:last-update-label!:
:source-highlighter: pygments

= Respostas Exercícios de PDI
Gabriel Vantuil
Luiz Felipe Maciel Correia 
:appversion: 1.0.0

Site para hospedagem das respostas dos exercicios propostos no 
link:http://agostinhobritojr.github.io/tutoriais/pdi/[tutorial^] do Prof. Dr. Agostinho Brito Jr. 

== Exercicios 2.2 ==

Esta seção é apenas uma introdução a manipulação dos pixels de uma imagem usando diretamente o metodo .at da classe Mat.

=== Exercício 2.2.1 - Regions ===

* Desenvolvimento:

É solicitado ao usuário dois pontos pertecentes ao interior da imagem. Logo depois a área definida pelos pontos 
de interesse é preenchida com a negativa da cor anterior. Para encontrar esse valor, basta fazer (255 - valor_antigo). 
	
* Resultados:

Ao testar o algoritmo foi informado P1 = (10,10) e P2 = (100,150) para inverter a cor.

[[fig_regionsR, Regions]]
//[.text-center]
.Saída do programa Regions
image::2.2/resRegions.png[title="Saída do programa Regions"]

* Código: 

[[exa_regions, Regions]]
[source,cpp]
.regions.cpp
----
include::2.2/regions.cpp[]
----

=== Exercício 2.2.2 - TrocaRegioes ===

* Desenvolvimento:

O primeiro passo para realizar a troca é armazenar a matriz original, e trabalhar em cima de uma outra matriz para 
que não haja perda de informações. Logo após ocorre a troca, que consiste em 4 laços onde ocorrem as cópias
 dos quadrantes para o quadrante da diagonal.

* Resultados:

Utilizado a imagem biel.png.

[[fig_trocaregioesE, Regions]]
//[.text-center]
.Saída do programa TrocaRegioes
image::2.2/resTrocaRegioes.png[title="Saída do programa TrocaRegioes"]

* Código: 

[[exa_trocaregioes, Regions]]
[source,cpp]
.trocaregioes.cpp
----
include::2.2/trocaregioes.cpp[]
----

== Exercicios 3.2 ==

Esta seção é uma introdução a indentificação de objetos na imagem, juntamente com noções do uso da função floodFill() do 
OpenCV.

=== Exercício 3.2.1 - Solução ===

* Desenvolvimento:


* Resultados:

[[fig_solucaoI, Solucao]]
//[.text-center]
.Saída do programa Solucao
image::3.2/resSolucao.png[title="Saída do programa Solucao"]

* Código: 

[[exa_solucao, Solucao]]
[source,cpp]
.solucao.cpp
----
include::3.2/labeling 3.2.1.cpp[]
----

=== Exercício 3.2.2 - ContaBuracos ===

* Desenvolvimento:

* Resultados:
** Passo 1: Retirar bolhas das bordas.=== Exercicio 4.2.2 - MotionDetector ===
** Passo 2: Contagem e Rotulação das bolhas como no exemplo.
** Passo 3: Preencher o fundo com outro tom de cinza.
** Passo 4: Contar e Rotular o(s) buracos(s) de cada bolha.

Aṕos o procedimento é mostrado no terminal a quantidade de bolhas encontradas. Foi utilizada uma imagem diferente para poder
testar bolhas com mais de um buraco.

[[fig_contaburacos1, ContaBuracos1]]
//[.text-center]
.Passo 1 programa ContaBuracos
image::ativ3.2/resContaBuracos1.png[title="Passo 1 programa ContaBuracos"]

[[exa_contaburacos, ContaBuracos]]
[source,cpp]
.contaburacos.cpp
----
include::ativ3.2/labeling 3.2.2.cpp[]
----

== Exercícios 4.2 ==

=== Exercício 4.2.1 - Equalize ===

* Desenvolvimento:

* Resultados:

[[fig_equalize1, Equalize1]]
//[.text-center]
.Entrada do programa Equalize
image::4.2/.png[title="Entrada do programa Equalize"]

[[exa_equalize, Equalize]]
[source,cpp]
.equalize.cpp
----
include::4.2/equalize.cpp[]
----

=== Exercício 4.2.2 - MotionDetector ===

* Desenvolvimento:

* Resultados:

[[fig_motiondetector, MotionDetector]]
//[.text-center]
.Terminal do programa MotionDetector
image::4.2/.png[title="Terminal do programa MotionDetector"]

[[exa_motiondetector, MotionDetector]]
[source,cpp]
.motiondetector.cpp
----
include::4.2/motiondetector.cpp[]
----

== Exercícios 5.2 ==

Capítulo que trata dos estudos de filtragem espacial.

=== Exercício 5.2.1 - LaplGauss ===

* Desenvolvimento:

* Resultados: 

[[fig_laplgauss1, LaplGauss1]]
//[.text-center]
.Filtro laplaciano normal.
image::5.2/resLaplGauss1.png[title="Filtro laplaciano normal"]

[[exa_laplgauss, LaplGauss]]
[source,cpp]
.laplgauss.cpp
----
include::5.2/laplgauss.cpp[]
----
